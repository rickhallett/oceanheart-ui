# Task ID: 10
# Title: Implement Input Validation for API Routes
# Status: pending
# Dependencies: 6, 7
# Priority: high
# Description: Enhance security by adding input validation to all API routes that accept user input.
# Details:
Use Zod for input validation:

1. Install Zod:
```bash
npm install zod
```

2. Create validation schemas:
```typescript
// schemas/user.ts
import { z } from 'zod';

export const createUserSchema = z.object({
  name: z.string().min(2).max(100),
  email: z.string().email(),
  password: z.string().min(8),
});

export type CreateUserInput = z.infer<typeof createUserSchema>;
```

3. Implement in API routes:
```typescript
// app/api/users/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { createUserSchema } from '@/schemas/user';
import { createApiResponse } from '@/utils/api';
import { createError, ErrorCode } from '@/utils/errors';

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    
    // Validate input
    const result = createUserSchema.safeParse(body);
    if (!result.success) {
      const error = createError(
        ErrorCode.VALIDATION_ERROR,
        'Invalid input',
        result.error.format(),
        400
      );
      return NextResponse.json(
        createApiResponse(null, error, error.statusCode),
        { status: error.statusCode }
      );
    }
    
    // Proceed with validated data
    const validatedData = result.data;
    // Implementation
    
  } catch (error) {
    // Error handling
  }
}
```

# Test Strategy:
Write unit tests for validation schemas to verify they correctly validate various input scenarios. Create integration tests for API routes that test both valid and invalid inputs. Test edge cases such as empty strings, extremely long inputs, and special characters.
