# Task ID: 7
# Title: Implement API Error Handling
# Status: pending
# Dependencies: 6
# Priority: high
# Description: Standardize error handling and HTTP status code usage across all API routes.
# Details:
Create a centralized error handling system:

1. Define error types and codes:
```typescript
// types/errors.ts
export enum ErrorCode {
  UNAUTHORIZED = 'UNAUTHORIZED',
  NOT_FOUND = 'NOT_FOUND',
  VALIDATION_ERROR = 'VALIDATION_ERROR',
  SERVER_ERROR = 'SERVER_ERROR',
  // Add more specific error codes
}

export interface AppError {
  code: ErrorCode;
  message: string;
  details?: unknown;
  statusCode: number;
}
```

2. Create error handling utilities:
```typescript
// utils/errors.ts
import { ErrorCode, AppError } from '@/types/errors';

export function createError(
  code: ErrorCode,
  message: string,
  details?: unknown,
  statusCode?: number
): AppError {
  return {
    code,
    message,
    details,
    statusCode: statusCode || getDefaultStatusCode(code),
  };
}

function getDefaultStatusCode(code: ErrorCode): number {
  switch (code) {
    case ErrorCode.UNAUTHORIZED: return 401;
    case ErrorCode.NOT_FOUND: return 404;
    case ErrorCode.VALIDATION_ERROR: return 400;
    case ErrorCode.SERVER_ERROR: return 500;
    default: return 500;
  }
}
```

3. Implement in API routes:
```typescript
import { createError, ErrorCode } from '@/utils/errors';
import { createApiResponse } from '@/utils/api';

export async function GET(req: Request) {
  try {
    // Implementation
  } catch (error) {
    const appError = createError(
      ErrorCode.SERVER_ERROR,
      'Failed to process request',
      error
    );
    return Response.json(createApiResponse(null, appError, appError.statusCode));
  }
}
```

# Test Strategy:
Create unit tests for error handling utilities. Write integration tests for API routes to verify they handle different error scenarios correctly. Test that client-side code properly interprets and displays error messages from the API.
