# Task ID: 3
# Title: Archive HDI Feature
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Move all HDI-related code to the archive directory while preserving its structure
# Details:
Identify and move all HDI (Human Digital Interface) experimental code to `/archived/hdi/`. Follow the same pattern as with Saigo: create subdirectories for app pages, API routes, components, and utility functions. Document any specialized functionality in the README.md. Update any imports in active code that might reference these files. Ensure database references are documented.

# Test Strategy:
Verify all HDI files are moved correctly. Check that no active code references the old file locations. Confirm the application builds without errors related to missing HDI files.

# Subtasks:
## 1. Identify and map all HDI-related code [pending]
### Dependencies: None
### Description: Identify all HDI-related code files and create a detailed mapping of their current locations and future archived structure
### Details:
1. Search through the codebase for all HDI-related files and directories using grep/find commands or IDE search tools
2. Create a comprehensive mapping document that lists:
   - Current file path
   - Destination path in the `/archived/hdi/` directory
   - File type (component, page, API route, utility)
   - Any database references contained in the file
3. Organize the mapping to ensure the same structure is preserved in the archive
4. Identify any active code files that import or reference HDI components
5. Test the completeness of the mapping by verifying all HDI features are included
6. Document any specialized or complex functionality for later documentation

## 2. Create archive structure and move HDI code [pending]
### Dependencies: 3.1
### Description: Create the archive directory structure and move all HDI code while updating imports in active code
### Details:
1. Create the base `/archived/hdi/` directory
2. Create appropriate subdirectories for app pages, API routes, components, and utility functions based on the mapping
3. Move each HDI file to its corresponding location in the archive structure
4. Update any imports in active code that reference the moved files to either:
   - Point to the new archived location if the functionality is still needed
   - Remove the imports and related code if the functionality is no longer used
5. Run linting and compilation checks to ensure no broken references remain
6. Test the application to verify that non-HDI functionality continues to work properly
7. Commit changes in logical groups to maintain clear version history

## 3. Document HDI functionality and verify archive integrity [pending]
### Dependencies: 3.1, 3.2
### Description: Create comprehensive documentation for the archived HDI code and verify the archive's integrity
### Details:
1. Create a detailed README.md file in the `/archived/hdi/` directory that includes:
   - Overview of the HDI feature
   - Directory structure explanation
   - Key components and their functionality
   - Database references and schemas used
   - Any special configuration or environment variables
   - Reason for archiving
2. Document any database references in a separate DATABASE.md file if extensive
3. Verify the archive integrity by:
   - Checking that all files identified in subtask 1 are properly moved
   - Ensuring the directory structure is preserved
   - Confirming all imports in active code are updated
   - Running tests to ensure the main application works without HDI components
4. Clean up any temporary files or branches created during the archiving process
5. Create a final pull request with a complete description of changes made

