# Task ID: 4
# Title: Consolidate Authentication Components
# Status: pending
# Dependencies: 2, 3
# Priority: high
# Description: Standardize on a single authentication flow and remove duplicated auth implementations
# Details:
Keep only `/app/signin/page.tsx` and related components. Remove or archive duplicate implementations from `/signin/page.tsx` and `/app/saigo/signin/page.tsx`. Refactor `ButtonSignin.tsx` and `ButtonAccount.tsx` into a single component with different modes. Consolidate auth API routes, keeping only the necessary implementation. Update all references to use the standardized auth components. Ensure the authentication flow works end-to-end with Supabase.

# Test Strategy:
Test the complete authentication flow (sign in, sign out, account management). Verify all pages that use auth components still function correctly. Test on multiple browsers and devices to ensure responsive design works.

# Subtasks:
## 1. Audit and Consolidate Authentication Pages [pending]
### Dependencies: None
### Description: Analyze existing authentication pages, keep only the primary implementation, and archive duplicate pages
### Details:
1. Compare the three authentication pages (/app/signin/page.tsx, /signin/page.tsx, and /app/saigo/signin/page.tsx) to identify the most complete implementation
2. Ensure /app/signin/page.tsx has all necessary functionality from the other implementations
3. Archive or remove the duplicate pages at /signin/page.tsx and /app/saigo/signin/page.tsx
4. Update any imports or references to the removed pages to use /app/signin/page.tsx
5. Test that navigation to any of the previous sign-in URLs properly redirects to the consolidated page
6. Verify the consolidated sign-in page loads correctly and maintains all required functionality

## 2. Refactor Authentication Button Components [pending]
### Dependencies: 4.1
### Description: Combine ButtonSignin.tsx and ButtonAccount.tsx into a single reusable component with different modes
### Details:
1. Create a new component (e.g., AuthButton.tsx) that can function in both 'signin' and 'account' modes
2. Implement a 'mode' prop that determines the button's appearance and behavior
3. Consolidate styling, click handlers, and state management from both original components
4. Add appropriate TypeScript types for the component props
5. Replace all instances of ButtonSignin and ButtonAccount with the new AuthButton component
6. Add unit tests for the component in both modes
7. Verify the component works correctly in all places where the original components were used

## 3. Consolidate Authentication API Routes [pending]
### Dependencies: 4.1, 4.2
### Description: Identify and standardize authentication API routes, removing duplicates and ensuring end-to-end functionality
### Details:
1. Identify all authentication-related API routes in the codebase
2. Determine which routes are necessary for the consolidated authentication flow
3. Update the necessary routes to work with the standardized authentication components
4. Remove or archive duplicate or unnecessary API routes
5. Update any client-side code to use the consolidated API routes
6. Test the complete authentication flow end-to-end with Supabase, including:
   - Sign in
   - Sign out
   - Account management
   - Session persistence
7. Verify that authentication state is properly maintained throughout the application
8. Document the consolidated authentication system for future reference

