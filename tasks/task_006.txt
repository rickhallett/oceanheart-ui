# Task ID: 6
# Title: Clean Up Directory Structure
# Status: pending
# Dependencies: 4, 5
# Priority: medium
# Description: Remove duplicated root-level files and standardize on App Router pattern
# Details:
Archive or remove duplicated root-level files that duplicate App Router functionality: `/page.tsx`, `/globals.css`, `/error.tsx`, and `/not-found.tsx`. Clean up development tool files like `/aider.session`, `/session.aider`, and `/bak.aider.model.settings.yml`. Ensure all active code follows the App Router pattern with proper directory structure. Move any remaining components from legacy locations to their appropriate directories.

# Test Strategy:
Verify the application builds without errors. Check that all pages still render correctly. Confirm that routes work as expected after removing duplicated files.

# Subtasks:
## 1. Identify and Archive Duplicate Root-Level Files [pending]
### Dependencies: None
### Description: Identify, document, and archive duplicate root-level files that overlap with App Router functionality
### Details:
1. Create a backup directory named 'archived_files' at the project root
2. Identify the root-level files that duplicate App Router functionality: '/page.tsx', '/globals.css', '/error.tsx', and '/not-found.tsx'
3. For each file, verify if equivalent functionality exists in the App Router structure (e.g., 'app/page.tsx')
4. Document each file's purpose and its App Router replacement in a markdown file 'archived_files/MIGRATION_NOTES.md'
5. Move the duplicate files to the 'archived_files' directory
6. Test the application to ensure no functionality is broken after removing these files
7. Update any imports that might be referencing these files to their new App Router equivalents

## 2. Clean Up Development Tool Files [pending]
### Dependencies: None
### Description: Remove or organize development tool files that are cluttering the root directory
### Details:
1. Identify development tool files in the root directory: '/aider.session', '/session.aider', '/bak.aider.model.settings.yml', and any similar files
2. Determine which files are safe to delete and which need to be preserved
3. For files that need to be preserved, create a '.devtools' directory at the project root
4. Move necessary development tool files to the '.devtools' directory
5. Delete unnecessary development tool files
6. Update any tool configurations or scripts that might reference these files in their original locations
7. Document the new organization structure in the project README or a dedicated development documentation file
8. Add appropriate entries to .gitignore for development tool files that shouldn't be tracked

## 3. Migrate Legacy Components to App Router Structure [pending]
### Dependencies: 6.1
### Description: Identify and move components from legacy locations to their appropriate directories in the App Router pattern
### Details:
1. Scan the codebase for components not following the App Router pattern
2. Create a migration plan that maps each component to its appropriate destination in the App Router structure
3. For UI components, move them to appropriate directories under 'app/components' or 'components'
4. For page-specific components, move them to their corresponding page directories
5. For layout components, move them to appropriate layout files
6. Update all import statements throughout the codebase to reference the new component locations
7. Ensure component props and interfaces remain consistent during migration
8. Test each migrated component to verify it functions correctly in its new location
9. Run the full application test suite to ensure no regressions
10. Document the new component organization in a project architecture document

